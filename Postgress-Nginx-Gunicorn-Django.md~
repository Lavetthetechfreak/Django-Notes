


##How To Install and Configure Django with Postgres, Nginx, and Gunicorn  

Before anything else, make sure all packages installed are upto date. Root to your directory and run:  
        
        sudo apt-get update  
        
        sudo apt-get upgrade  
        
        
###Install and create a viretual Environment  
Installing vthe viretual env is quite simple. Just run the following command:  
        sudo apt-get install python-virtualenv  
        
 Now create the virtual env with a name of your choice, I suggest one related to the current project.  
        
        sudo virtualenv /<root folder>/<virtualenv name>  
        
A directory will be created with the environment name.  


###Install Django  
Activate the virtual environment so as to install packages needed for the project  
        source ./<env name>/bin/activate  
        
We can now install Django with the virtual env active. To do this, we'll use **pip** a Python package manager much like Easy install. Here's the commnad you'll run:  

        pip install Django  
        
Getting errors o using pip?  
This should Do;  
        sudo apt-get install python-pip  
        
        
 
        
###Install PostgreSQL  

Most Django Devs prefer PostrgeSQL as their database server. It's much more robust than MySQL and it works well with the Django ORM.  
We won't be needing the virtual environment for this step, run the following command to deactivate:  
        deactivate
        
First off we have to install dependaencies for PostrgeSQL to work with Django with the command:  
        
        sudo apt-get install libpq-dev python-dev
        
  Then istall PostrgeSQL like so:   
        
        sudo apt-get install postgresql postgresql-contrib  
        
        
By default, Postgres uses an authentication scheme called "peer authentication" for local connections. Basically, this means that if the user's operating system username matches a valid Postgres username, that user can login with no further authetication.  

We need to change the current user to perform administrative tasks:  
        
        sudo su - postgres
  You should now be in a shell session so login into a Postgres session using:  
        
        psql
        
To create a database, type in this command:  
        CREATE DATABASE <databaseName>;
        
 Next we create a database user which we'll use to connect to ad interact with the database. Make sure to set the password to something strong and secure:  
 
 
        CREATE USER <myprojectuser> WITH PASSWORD 'password';  
        
Next up we set up the default encoding, default transaction isolation scheme and lastly, the timezone.  

        ALTER ROLE myprojectuser SET client_encoding TO 'utf8';  
        ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';  
        ALTER ROLE myprojectuser SET timezone TO 'UTC';  
        
 Then all we need to do is giving our database user access rights to the database we created:  
 
 
        GRANT ALL PRIVILEGES ON DATABASE <databaseName> TO myprojectuser;  
        
        
Exit the SQL prompt to get back to the postgres user's shell session using:  
            
          \q  
Exit out of shell using:  
            
            exit
        
If you already have a virtual environment, activate it and run the following to install Postgres Django dependency.  

            pip install django psycopg2
        
We're now ready to roll!   


Open the settigns.py file in order to setup Postgres

Change this...  
            DATABASES = {  
        'default': {  
        'ENGINE': 'django.db.backends.sqlite3',  
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),  
    }  
}  

To this...  

         DATABASES = {  
        'default': {  
        'ENGINE': 'django.db.backends.postgresql_psycopg2',  
        'NAME': 'myproject',  
        'USER': 'myprojectuser',  
        'PASSWORD': 'password',  
        'HOST': 'localhost',  
        'PORT': '',  
    }  
}  

Done? root back to main, Make migrations, migrate  

         python manage.py makemigrations  
         python manage.py migrate  


###Install NGINX  
NGINX is and incredibly fast and light-weight web server. We will use it to serve up our static files for our Django app.  

        sudo apt-get install nginx
        
        
        

        
